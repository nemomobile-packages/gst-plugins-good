From cf7642f8bd31fda1ee0ab9f2e429a60fd831fb88 Mon Sep 17 00:00:00 2001
From: Mohammed Hassan <mohammed.hassan@jolla.com>
Date: Thu, 5 Mar 2015 17:12:13 +0200
Subject: [PATCH 2/2] qtmux: write rotation information into the TKHD matrix

This patch handles the simple cases of 0, 90, 180 and 270

We simply catch the image orientation event and translate that into
the corresponding transformation matrix.

Based on the work of Andrew den Exter <andrew.den.exter@jollamobile.com>
---
 gst/isomp4/atoms.c    | 39 +++++++++++++++++++++++++++++++++++++++
 gst/isomp4/atoms.h    |  2 ++
 gst/isomp4/gstqtmux.c | 25 +++++++++++++++++++++++++
 3 files changed, 66 insertions(+)

diff --git a/gst/isomp4/atoms.c b/gst/isomp4/atoms.c
index 3f1051c..20cc4d7 100644
--- a/gst/isomp4/atoms.c
+++ b/gst/isomp4/atoms.c
@@ -3557,6 +3557,45 @@ atom_trak_set_subtitle_type (AtomTRAK * trak, AtomsContext * context,
   trak->is_h264 = FALSE;
 }
 
+void
+atom_trak_set_video_transform (AtomTRAK * trak, gint rotation)
+{
+  switch (rotation) {
+  case 0:
+    trak->tkhd.matrix[0] = 1 << 16;
+    trak->tkhd.matrix[1] = 0;
+    trak->tkhd.matrix[3] = 0;
+    trak->tkhd.matrix[4] = 1 << 16;
+    trak->tkhd.matrix[6] = 0;
+    trak->tkhd.matrix[7] = 0;
+    break;
+  case 90:
+    trak->tkhd.matrix[0] = 0;
+    trak->tkhd.matrix[1] = 1 << 16;
+    trak->tkhd.matrix[3] = G_MAXUINT16 << 16;
+    trak->tkhd.matrix[4] = 0;
+    trak->tkhd.matrix[6] = trak->tkhd.height;
+    trak->tkhd.matrix[7] = 0;
+    break;
+  case 180:
+    trak->tkhd.matrix[0] = G_MAXUINT16 << 16;
+    trak->tkhd.matrix[1] = 0;
+    trak->tkhd.matrix[3] = 0;
+    trak->tkhd.matrix[4] = G_MAXUINT16 << 16;
+    trak->tkhd.matrix[6] = trak->tkhd.width;
+    trak->tkhd.matrix[7] = trak->tkhd.height;
+    break;
+  case 270:
+    trak->tkhd.matrix[0] = 0;
+    trak->tkhd.matrix[1] = G_MAXUINT16 << 16;
+    trak->tkhd.matrix[3] = 1 << 16;
+    trak->tkhd.matrix[4] = 0;
+    trak->tkhd.matrix[6] = 0;
+    trak->tkhd.matrix[7] = trak->tkhd.width;
+    break;
+  }
+}
+
 static void
 atom_mfhd_init (AtomMFHD * mfhd, guint32 sequence_number)
 {
diff --git a/gst/isomp4/atoms.h b/gst/isomp4/atoms.h
index b497074..36d4c8f 100644
--- a/gst/isomp4/atoms.h
+++ b/gst/isomp4/atoms.h
@@ -935,6 +935,8 @@ void atom_trak_set_video_type (AtomTRAK * trak, AtomsContext * context,
 void atom_trak_set_subtitle_type (AtomTRAK * trak, AtomsContext * context,
                                SubtitleSampleEntry * entry);
 
+void atom_trak_set_video_transform (AtomTRAK * trak, gint rotation);
+
 void atom_trak_update_bitrates (AtomTRAK * trak, guint32 avg_bitrate,
                                 guint32 max_bitrate);
 
diff --git a/gst/isomp4/gstqtmux.c b/gst/isomp4/gstqtmux.c
index 08aa05c..f0e0439 100644
--- a/gst/isomp4/gstqtmux.c
+++ b/gst/isomp4/gstqtmux.c
@@ -3366,6 +3366,7 @@ gst_qt_mux_sink_event (GstCollectPads * pads, GstCollectData * data,
       GstTagSetter *setter = GST_TAG_SETTER (qtmux);
       GstTagMergeMode mode;
       gchar *code;
+      gchar *orientation;
 
       GST_OBJECT_LOCK (qtmux);
       mode = gst_tag_setter_get_tag_merge_mode (setter);
@@ -3403,6 +3404,30 @@ gst_qt_mux_sink_event (GstCollectPads * pads, GstCollectData * data,
         g_free (code);
       }
 
+      if (gst_tag_list_get_string (list, GST_TAG_IMAGE_ORIENTATION, &orientation)) {
+	GstQTPad *qtpad = gst_pad_get_element_private (pad);
+	g_assert (qtpad);
+
+	if (qtpad->trak) {
+	  gint rotation = -1;
+	  if (strcmp(orientation, "rotate-0") == 0)
+	    rotation = 0;
+	  else if (strcmp(orientation, "rotate-90") == 0)
+	    rotation = 90;
+	  else if (strcmp(orientation, "rotate-180") == 0)
+	    rotation = 180;
+	  else if (strcmp(orientation, "rotate-270") == 0)
+	    rotation = 270;
+
+	  if (rotation != -1) {
+	    GST_DEBUG_OBJECT (qtmux, "setting rotation to %d", rotation);
+	    atom_trak_set_video_transform (qtpad->trak, rotation);
+	  }
+	}
+
+	g_free (orientation);
+      }
+
       gst_event_unref (event);
       event = NULL;
       ret = TRUE;
-- 
2.1.4

